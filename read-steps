docker image command : docker build -t node_image .
docker run container  : docker run -d -v "${PWD}:/app" -v /app/node_modules -p 3000:3000 --name node-container node-image


3 : if want to set the env vsriable in node application, then need to append one flag which is --env-file path to env file, which is --env-file ./.env
4 :  to reduce the lenght of the docker command to run the container bcs we will be dealing with more than 1 container while owrking on node js app, hence introduced docker-compose.yml
5 : in case whrn we want to down he container we can use the commad docker-compose down -v (-v will delett he unnecessary volumes created)
6 : if want to run the new container with new image maiig some cahnges in the docker file or the code, then docer compsoe is pretty dumb, we have to mention that it is an new image 
   so the d=command will be docker-compose  up -d --build

   ==============================development VS production ==================================

   create docker compose file one  form developmment and one for production

   so when working in development env , we will be having 2 docker compose files , one for developemt and one for production, 

   step one  : create docker  compose file, create docker compose development file and docker compose production file, 
   now whenever we will run the development file , we will be using the command 
   docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d 
   so this command will run the : docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --build 



   =====================running mongo continer=======================
   After the setup for the mongo contir inside the docker compose yml file, we just for ouself verify weather the things are working as they should , save data, retrieve date even after the container is topped. so we will first have to go inside the mogno contaier shell: 

   step one :  docker exec -it mongo-container /bin/bash  enter into the mogno bash 
step two : mongosh
step three :  auth user self as a valid connection users , use admin, db.auth("gaurav","rawat")
step four : then we cam run our mongo commands 

       or simpply qwe can do that by using the below command 
**  docker exec -it mongo-container mongosh -u gaurav -p rawat --authenticationDatabase admin
use mydb, db.createCollection("users"), db.uers.insertOne({name : "gaurav"}), db.users.find()



============================================== Depend son ====

only used when a servcie is depends on another service to work properly, as node js depends on mogno for the complete backend application, 
however if you do not want to up and run the another service  we can use --no-deps argument to start the only desired service. 

Error response from daemon: driver failed programming external connectivity on endpoint node-container (19494a28091863b78f797451503ea37e4100e48cffe907e5a17cf906049becb3): Bind for 0.0.0.0:3000 failed: port is already allocated, if port o already located then ned to end kill the port 3000 which is runnig with the commands below
 --> netstat -aon | findstr :3000
 -->   TCP    0.0.0.0:3000     0.0.0.0:0     LISTENING     12345


curl http://localhost:3000/api/v1

little about location proxy pass of nginc conf
जब कोई यूज़र ये URL एक्सेस करता है:
http://localhost:3000/api/v1
Nginx देखता है कि URL /api/ से शुरू हो रहा है ✅

फिर Nginx उस request को Docker नेटवर्क के अंदर मौजूद app नाम के सर्वर (Node.js) पर port 3000 पर भेज देता है

यानी Nginx खुद उस URL को इस तरह forward करता है:
http://app:3000/api/v1